## ———————————————————————————————————————    
## ———————————— [stringnode]  ————————————
## ——————————————————————————————————————— 


## ———————————— GLOBAL VARIABLES ————————————

TEMPO = 120;
BARDUR = 240000/TEMPO;
UNITDUR = BARDUR * 1/16;
TUNINGS = for $x in (5500 5500 4800 3600) collect [ (2100 1400 700 0) + $x ];
FRETS = 0 1 3 4 5 7 8 9 11 12;
PI = 3.141593; 
TAU = PI*2;
QUANTINFO = [60 [4 4 1]];

## ———————————— GLOBAL FUNCTIONS ————————————

remap = ($x, $inmin, $inmax, $outmin, $outmax -> (
    ($x-$inmin)/($inmax-$inmin))*($outmax-$outmin) + $outmin);

tab2mc = ($tab, $tuning -> (
    $tab = flat($tab); 
    $tuning = flat(TUNINGS:($tuning)); 
    $tuning:($tab:1) + (100*($tab:2))));

tab2harm = ($tab, $tuning -> (
    $tab = flat($tab); 
    $tuning = flat(TUNINGS:($tuning)); 
    $mc = $tuning:($tab:1); 
    $mc $mc + (100*($tab:2))));

makecurve = ($size, $curve, $min, $max -> (
    for $x in remap(1...$size, 1, $size, 0, $size) collect ($x/$size)**$curve)*($max-$min) + $min);

fold = ($x, $m -> abs((($x + $m) % ($m * 2)) - $m));

gen_triangle_pattern = ($size -> (
    $i = max(1, int(floor($size / 2) * 2)); 
    $pat = fold(0...($i-1), min(($i/2), 3):1); 
    1 + flat(slice(if $size % 2 == 0 then $pat else ($pat $pat:1), $size):1)));
    
get_pattern_sizes = ($size -> (
    min($size, 6) :* max(1, floor($size/6)) ($k = if $size > 6 then $size%6 else 0; 
    if $k > 0 then $k)));

makepat = ($size -> for $x in get_pattern_sizes($size) collect gen_triangle_pattern($x));

idx2vel = ($i, $N -> (0.75-0.25*cos((($i % $N)/($N-1))*TAU)));

getperiod = ($s, $b, $h, $v -> (
    $s*$b) + ($h * (length(flat($v))-1))*2);

par2list = ($param, $v -> if depth($param) == 1 then (for $x in 1...length(flat($v)) collect $param) else flat($param));

resample = ($x, $n ->
    if $n == length($x) then $x else (
        if $n == 1 then $x:1 else (
            for $i in 0...($n-1) collect (
                $index = ($i/($n-1) * (length($x)-1))+1;
                $fi = $index%1;
                $ii = int(floor($index));
                $a = $x:$ii;
                $b = $x:min(length($x), $ii+1);
                ($a*(1-$fi))+($b*$fi)))));

## ———————————— PRINT READY ————————————
print( `[stringnode] `sequencer `ready )